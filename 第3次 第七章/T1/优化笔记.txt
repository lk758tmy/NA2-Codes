优化CGS&MGS：
1. 能在一个循环里解决的，就不用两个循环，减少了不少时间
2. CGS有一句的dot里既有q又有m，其实是一样的，但都用q减少了极大的时间
理论上的乘除次数一样，大概是因为编译器对循环的优化，还有CPU片内对数据的缓存
3.数乘直接实现相比用axpy(本来想利用多线程)实现，误差、直交性好了两个数量级
因为axpy大概长这样：q_k <- (1/nrm(q_k)-1)*q_k + q_k
矩阵大时列向量的模会很大，这里有小数减大数导致的精度丢失！直交性
4.矩阵Q按行储存改成按列储存，直接快了5倍！

优化Householder:
1. A左乘H变成R，其实只用对右下角的矩阵进行操作，节省相应部分2/3的操作
2. Q的计算也可以只对下半部分操作，又优化掉1/2的操作
这两部分是主要的复杂度，这样几乎等于把总时间砍半了
本来H比G的用时多一倍，但检查后发现矩阵的稠密性没问题，这样优化一下用时就比G短了
3.于是受到GS的启发，R也改了按列，砍掉了大概2/3的时间

优化Givens：
H优化完后比Givens好了一倍，虽然符合理论，但还想给G优化
1. 同上，计算R的每行的旋转时，0的部分不需要管了，优化掉1/2的操作（总时间减少1/4）
但这玩意好像改按列就没啥卵用了...